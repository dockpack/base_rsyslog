---
- name: Verify
  hosts: rsyslog-client
  vars:
    this_role: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') | basename }}"

  tasks:
    - name: Gather package facts
      ansible.builtin.package_facts:
        manager: rpm

    - name: Gather service facts
      ansible.builtin.service_facts:

    - name: Audit rsyslog
      ansible.builtin.include_role:
        name: "{{ this_role }}"
        tasks_from: verify

- name: Test E2E security events
  hosts: rsyslog-client

  tasks:
    - name: Test a privileged useradd operation
      ansible.builtin.user:
        name: test_user
        shell: /bin/bash

    - name: Test a command as test_ user
      become: true
      become_user: test_user
      ansible.builtin.command: id
      changed_when: false

    - name: Test a command as root
      become: true
      ansible.builtin.command: 'ps -ef'
      changed_when: false
      register: processes

    - name: List processes
      ansible.builtin.debug:
        msg: "{{ processes.stdout_lines }}"
        verbosity: 2

- name: Verify E2E result
  hosts: rsyslog-server
  gather_facts: false

  tasks:
    - name: Gather service facts
      ansible.builtin.service_facts:

    - name: Ensure rsyslog service is running
      ansible.builtin.assert:
        quiet: true
        that:
          - ansible_facts.services['rsyslog.service'].state == 'running'

    - name: Search for errors on rsyslog server
      ansible.builtin.shell: set -o pipefail; grep rsyslog /var/log/messages | grep error | grep -v ansible.legacy.command
      changed_when: false
      register: remote_log
      failed_when: false

    - name: Display the errors, fail if any
      ansible.builtin.debug:
        msg: "{{ remote_log.stdout_lines }}"
      failed_when: remote_log.stdout_lines is search('error')

    - name: Collect the remote secure log on server
      ansible.builtin.command: cat /var/log/remote/rsyslog-client/secure
      changed_when: false
      register: remote_log

    - name: Display the log and assert useradd is logged
      ansible.builtin.debug:
        msg: "{{ remote_log.stdout_lines }}"
      failed_when: remote_log.stdout_lines is not search('useradd')
...
